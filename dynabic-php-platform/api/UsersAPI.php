<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class UsersAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * GetAllUsers
	 *
	 * 
	 * 
   * @param pageNumber  page Number
   *  @param pageSize  page Size
   *  
	 * @return Array<UserResponse> {@link UserResponse} 
	 * @throws APIException 
	 */

	 public function GetAllUsers($pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/users/{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'UserResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetUserById
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */

	 public function GetUserById($userId) {

		//parse inputs
		$resourcePath = "/users/{userId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetUserByUserName
	 *
	 * 
	 * 
   * @param userName  user Name
   *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */

	 public function GetUserByUserName($userName) {

		//parse inputs
		$resourcePath = "/users/byname/[{userName}].{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userName != null) {
			$resourcePath = str_replace("{userName}", $this->apiClient->toPathValue($userName), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetUserApiKeys
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @return UserApiKeysResponse {@link UserApiKeysResponse} 
	 * @throws APIException 
	 */

	 public function GetUserApiKeys($userId) {

		//parse inputs
		$resourcePath = "/users/apikeys/{userId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserApiKeysResponse');
		return $responseObject;
				
				
	 }


	/**
	 * AddUser
	 *
	 * 
	 * 
   * @param postData  new User
   *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */

	 public function AddUser($postData) {

		//parse inputs
		$resourcePath = "/users/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserResponse');
		return $responseObject;
				
				
	 }


	/**
	 * UpdateUser
	 *
	 * 
	 * 
   * @param postData  updatedUser
   *  @param userId  user Id
   *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */

	 public function UpdateUser($postData, $userId) {

		//parse inputs
		$resourcePath = "/users/{userId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserResponse');
		return $responseObject;
				
				
	 }


	/**
	 * DeleteUser
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @throws APIException 
	 */

	 public function DeleteUser($userId) {

		//parse inputs
		$resourcePath = "/users/{userId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * SetDeletedStatus
	 *
	 * 
	 * 
   * @param userId  user Id
   *  @param status  status
   *  
	 * @throws APIException 
	 */

	 public function SetDeletedStatus($userId, $status) {

		//parse inputs
		$resourcePath = "/users/{userId}/delete-status/{status}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}
		if($status != null) {
			$resourcePath = str_replace("{status}", $this->apiClient->toPathValue($status), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * SetActiveStatus
	 *
	 * 
	 * 
   * @param userId  user Id
   *  @param status  status
   *  
	 * @throws APIException 
	 */

	 public function SetActiveStatus($userId, $status) {

		//parse inputs
		$resourcePath = "/users/{userId}/active-status/{status}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}
		if($status != null) {
			$resourcePath = str_replace("{status}", $this->apiClient->toPathValue($status), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * ResetPassword
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @throws APIException 
	 */

	 public function ResetPassword($userId) {

		//parse inputs
		$resourcePath = "/users/{userId}/password";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * ModifyPassword
	 *
	 * 
	 * 
   * @param userId  user Id
   *  @param oldPassword  old Password
   *  @param newPassword  new Password
   *  
	 * @throws APIException 
	 */

	 public function ModifyPassword($userId, $oldPassword, $newPassword) {

		//parse inputs
		$resourcePath = "/users/{userId}/new-pwd/{oldPassword}/{newPassword}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}
		if($oldPassword != null) {
			$resourcePath = str_replace("{oldPassword}", $this->apiClient->toPathValue($oldPassword), $resourcePath);
		}
		if($newPassword != null) {
			$resourcePath = str_replace("{newPassword}", $this->apiClient->toPathValue($newPassword), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * SetRoles
	 *
	 * 
	 * 
   * @param userId  user Id
   *  @param roles  roles
   *  
	 * @throws APIException 
	 */

	 public function SetRoles($userId, $roles) {

		//parse inputs
		$resourcePath = "/users/{userId}/set-roles?roles={roles}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}
		if($roles != null) {
			$resourcePath = str_replace("{roles}", $this->apiClient->toPathValue($roles), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * DeleteApiKeys
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @throws APIException 
	 */

	 public function DeleteApiKeys($userId) {

		//parse inputs
		$resourcePath = "/users/{userId}/disable-api-access";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * GenerateNewApiKeys
	 *
	 * 
	 * 
   * @param userId  user Id
   *  
	 * @return UserApiKeysResponse {@link UserApiKeysResponse} 
	 * @throws APIException 
	 */

	 public function GenerateNewApiKeys($userId) {

		//parse inputs
		$resourcePath = "/users/enable-api-access/{userId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($userId != null) {
			$resourcePath = str_replace("{userId}", $this->apiClient->toPathValue($userId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'UserApiKeysResponse');
		return $responseObject;
				
				
	 }



}