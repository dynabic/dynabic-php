<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class EventsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * GetEventsForSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param pageNumber  page Number
   *  @param pageSize  page Size
   *  
	 * @return Array<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */

	 public function GetEventsForSubscription($subscriptionId, $pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/events/subscription/{subscriptionId}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'EventResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetEventsForSubscriptionBetweenDates
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param fromDate  from Date
   *  @param toDate  to Date
   *  
	 * @return Array<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */

	 public function GetEventsForSubscriptionBetweenDates($subscriptionId, $fromDate, $toDate) {

		//parse inputs
		$resourcePath = "/events/subscription/{subscriptionId}/{fromDate}/{format}?toDate={toDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($fromDate != null) {
			$resourcePath = str_replace("{fromDate}", $this->apiClient->toPathValue($fromDate), $resourcePath);
		}
		if($toDate != null) {
			$resourcePath = str_replace("{toDate}", $this->apiClient->toPathValue($toDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'EventResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetEvent
	 *
	 * 
	 * 
   * @param eventId  event Id
   *  
	 * @return EventResponse {@link EventResponse} 
	 * @throws APIException 
	 */

	 public function GetEvent($eventId) {

		//parse inputs
		$resourcePath = "/events/{eventId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($eventId != null) {
			$resourcePath = str_replace("{eventId}", $this->apiClient->toPathValue($eventId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'EventResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetEventsForSite
	 *
	 * 
	 * 
   * @param siteId  site Id
   *  @param eventTypeFilter  event Type Filter
   *  @param pageNumber  page Number
   *  @param pageSize  page Size
   *  
	 * @return Array<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */

	 public function GetEventsForSite($siteId, $eventTypeFilter, $pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/events/site/{siteId}.{format}?eventTypeFilter={eventTypeFilter}&pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}
		if($eventTypeFilter != null) {
			$resourcePath = str_replace("{eventTypeFilter}", $this->apiClient->toPathValue($eventTypeFilter), $resourcePath);
		}
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'EventResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetEvents
	 *
	 * 
	 * 
   * @param eventTypeFilter  event Type Filter
   *  @param numberOfReturnedEvents  number Of Returned Events
   *  
	 * @return Array<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */

	 public function GetEvents($eventTypeFilter, $numberOfReturnedEvents) {

		//parse inputs
		$resourcePath = "/events/{format}?eventTypeFilter={eventTypeFilter}&numberOfReturnedEvents={numberOfReturnedEvents}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($eventTypeFilter != null) {
			$resourcePath = str_replace("{eventTypeFilter}", $this->apiClient->toPathValue($eventTypeFilter), $resourcePath);
		}
		if($numberOfReturnedEvents != null) {
			$resourcePath = str_replace("{numberOfReturnedEvents}", $this->apiClient->toPathValue($numberOfReturnedEvents), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'EventResponse');
        }
        return $responseObjects;				
	 }



}