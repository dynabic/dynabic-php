<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class AppsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * GetAllApplications
	 *
	 * 
	 * 
   * 
	 * @return Array<ApplicationResponse> {@link ApplicationResponse} 
	 * @throws APIException 
	 */

	 public function GetAllApplications() {

		//parse inputs
		$resourcePath = "/apps/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ApplicationResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetCompanyApplications
	 *
	 * 
	 * 
   * 
	 * @return Array<ApplicationInCompanyResponse> {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */

	 public function GetCompanyApplications() {

		//parse inputs
		$resourcePath = "/apps/bycompany/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ApplicationInCompanyResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetCompanyApplicationById
	 *
	 * 
	 * 
   * @param applicationId  application Id
   *  
	 * @return ApplicationInCompanyResponse {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */

	 public function GetCompanyApplicationById($applicationId) {

		//parse inputs
		$resourcePath = "/apps/{applicationId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($applicationId != null) {
			$resourcePath = str_replace("{applicationId}", $this->apiClient->toPathValue($applicationId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ApplicationInCompanyResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetCompanyApplicationByName
	 *
	 * 
	 * 
   * @param appName  app Name
   *  
	 * @return ApplicationInCompanyResponse {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */

	 public function GetCompanyApplicationByName($appName) {

		//parse inputs
		$resourcePath = "/apps/[{appName}].{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($appName != null) {
			$resourcePath = str_replace("{appName}", $this->apiClient->toPathValue($appName), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ApplicationInCompanyResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetApplicationCurrentPlan
	 *
	 * 
	 * 
   * @param applicationId  application Id
   *  
	 * @return ApplicationPlan {@link ApplicationPlan} 
	 * @throws APIException 
	 */

	 public function GetApplicationCurrentPlan($applicationId) {

		//parse inputs
		$resourcePath = "/apps/plan/{applicationId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($applicationId != null) {
			$resourcePath = str_replace("{applicationId}", $this->apiClient->toPathValue($applicationId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ApplicationPlan');
		return $responseObject;
				
				
	 }


	/**
	 * SetApplicationStatus
	 *
	 * 
	 * 
   * @param applicationId  application Id
   *  @param status  status
   *  
	 * @throws APIException 
	 */

	 public function SetApplicationStatus($applicationId, $status) {

		//parse inputs
		$resourcePath = "/apps/{applicationId}/{status}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($applicationId != null) {
			$resourcePath = str_replace("{applicationId}", $this->apiClient->toPathValue($applicationId), $resourcePath);
		}
		if($status != null) {
			$resourcePath = str_replace("{status}", $this->apiClient->toPathValue($status), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }



}