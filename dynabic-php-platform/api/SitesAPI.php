<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class SitesAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * GetSites
	 *
	 * 
	 * 
   * @param pageNumber  page Number
   *  @param pageSize  page Size
   *  
	 * @return Array<SiteResponse> {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function GetSites($pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/sites/{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SiteResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetSiteById
	 *
	 * 
	 * 
   * @param siteId  site Id
   *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function GetSiteById($siteId) {

		//parse inputs
		$resourcePath = "/sites/{siteId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SiteResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetSiteBySubdomain
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function GetSiteBySubdomain($siteSubdomain) {

		//parse inputs
		$resourcePath = "/sites/subdomain/{siteSubdomain}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SiteResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetSitesByName
	 *
	 * 
	 * 
   * @param siteName  site Name
   *  
	 * @return Array<SiteResponse> {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function GetSitesByName($siteName) {

		//parse inputs
		$resourcePath = "/sites/name/{siteName}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteName != null) {
			$resourcePath = str_replace("{siteName}", $this->apiClient->toPathValue($siteName), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SiteResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * AddSite
	 *
	 * 
	 * 
   * @param postData  new Site
   *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function AddSite($postData) {

		//parse inputs
		$resourcePath = "/sites/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SiteResponse');
		return $responseObject;
				
				
	 }


	/**
	 * UpdateSite
	 *
	 * 
	 * 
   * @param postData  updated Site
   *  @param siteId  site Id
   *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */

	 public function UpdateSite($postData, $siteId) {

		//parse inputs
		$resourcePath = "/sites/{siteId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SiteResponse');
		return $responseObject;
				
				
	 }


	/**
	 * DeleteSite
	 *
	 * 
	 * 
   * @param siteId  site Id
   *  
	 * @throws APIException 
	 */

	 public function DeleteSite($siteId) {

		//parse inputs
		$resourcePath = "/sites/{siteId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }



}