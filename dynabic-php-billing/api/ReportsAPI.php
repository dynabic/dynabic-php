<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class ReportsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}



	/**
	 * GetProductsSignupsEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ProductsSignups> {@link ProductsSignups} 
	 * @throws APIException 
	 */

	 public function GetProductsSignupsEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/ProductsSignupsEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ProductsSignups');
        }
        return $responseObjects;				
	 }



	/**
	 * GetProductsRevenuesEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ProductsRevenues> {@link ProductsRevenues} 
	 * @throws APIException 
	 */

	 public function GetProductsRevenuesEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/ProductsRevenuesEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ProductsRevenues');
        }
        return $responseObjects;				
	 }



	/**
	 * GetTotalRevenueAmount
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return Array<RevenueAmount> {@link RevenueAmount} 
	 * @throws APIException 
	 */

	 public function GetTotalRevenueAmount($siteSubdomain) {

		//parse inputs
		$resourcePath = "/reports/TotalRevenueAmount/{siteSubdomain}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'RevenueAmount');
        }
        return $responseObjects;				
	 }



	/**
	 * GetActiveSubscriptionsCount
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return ActiveSubscriptionsCountResponse {@link ActiveSubscriptionsCountResponse} 
	 * @throws APIException 
	 */

	 public function GetActiveSubscriptionsCount($siteSubdomain) {

		//parse inputs
		$resourcePath = "/reports/ActiveSubscriptionsCount/{siteSubdomain}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ActiveSubscriptionsCountResponse');
		return $responseObject;
				
				
	 }



	/**
	 * GetTotalSubscribersCount
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return TotalSubscribersCountResponse {@link TotalSubscribersCountResponse} 
	 * @throws APIException 
	 */

	 public function GetTotalSubscribersCount($siteSubdomain) {

		//parse inputs
		$resourcePath = "/reports/TotalSubscribersCount/{siteSubdomain}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'TotalSubscribersCountResponse');
		return $responseObject;
				
				
	 }



	/**
	 * GetTodayRevenueAmount
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return Array<RevenueAmount> {@link RevenueAmount} 
	 * @throws APIException 
	 */

	 public function GetTodayRevenueAmount($siteSubdomain) {

		//parse inputs
		$resourcePath = "/reports/TodayRevenueAmount/{siteSubdomain}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'RevenueAmount');
        }
        return $responseObjects;				
	 }



	/**
	 * GetTodayNewSubscribersCount
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  
	 * @return TodayNewSubscribersCountResponse {@link TodayNewSubscribersCountResponse} 
	 * @throws APIException 
	 */

	 public function GetTodayNewSubscribersCount($siteSubdomain) {

		//parse inputs
		$resourcePath = "/reports/TodayNewSubscribersCount/{siteSubdomain}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'TodayNewSubscribersCountResponse');
		return $responseObject;
				
				
	 }



	/**
	 * GetSignupsEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ReportIntValueItem> {@link ReportIntValueItem} 
	 * @throws APIException 
	 */

	 public function GetSignupsEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/SignupsEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ReportIntValueItem');
        }
        return $responseObjects;				
	 }



	/**
	 * GetRevenuesEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ReportDecimalValueItem> {@link ReportDecimalValueItem} 
	 * @throws APIException 
	 */

	 public function GetRevenuesEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/RevenuesEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ReportDecimalValueItem');
        }
        return $responseObjects;				
	 }



	/**
	 * GetCustomersEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ReportIntValueItem> {@link ReportIntValueItem} 
	 * @throws APIException 
	 */

	 public function GetCustomersEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/CustomersEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ReportIntValueItem');
        }
        return $responseObjects;				
	 }



	/**
	 * GetSubscriptionsEvolution
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param startDate  start Date
   *  @param endDate  end Date
   *  
	 * @return Array<ReportIntValueItem> {@link ReportIntValueItem} 
	 * @throws APIException 
	 */

	 public function GetSubscriptionsEvolution($siteSubdomain, $startDate, $endDate) {

		//parse inputs
		$resourcePath = "/reports/SubscriptionsEvolution/{siteSubdomain}/{startDate}/{format}?endDate={endDate}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		

		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

		if($startDate != null) {
			$resourcePath = str_replace("{startDate}", $this->apiClient->toPathValue($startDate), $resourcePath);
		}

		if($endDate != null) {
			$resourcePath = str_replace("{endDate}", $this->apiClient->toPathValue($endDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'ReportIntValueItem');
        }
        return $responseObjects;				
	 }



	/**
	 * GetSitesSummary
	 *
	 * 
	 * 
   * 
	 * @return Array<SiteSummary> {@link SiteSummary} 
	 * @throws APIException 
	 */

	 public function GetSitesSummary() {

		//parse inputs
		$resourcePath = "/reports/SitesSummary/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SiteSummary');
        }
        return $responseObjects;				
	 }



}