<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class TestsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * Refund
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param transactionId  transaction Id
   *  @param amount  amount
   *  
	 * @return bool {@link bool} 
	 * @throws APIException 
	 */

	 public function Refund($subscriptionId, $transactionId, $amount) {

		//parse inputs
		$resourcePath = "/tests/refund/{subscriptionId}/{transactionId}/{amount}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($transactionId != null) {
			$resourcePath = str_replace("{transactionId}", $this->apiClient->toPathValue($transactionId), $resourcePath);
		}
		if($amount != null) {
			$resourcePath = str_replace("{amount}", $this->apiClient->toPathValue($amount), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'bool');
		return $responseObject;
				
				
	 }


	/**
	 * AdjustSubscriptionBalance
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param isAmountAbsolute  is Amount Absolute
   *  @param amount  amount
   *  @param chargeDetails  charge Details
   *  
	 * @return bool {@link bool} 
	 * @throws APIException 
	 */

	 public function AdjustSubscriptionBalance($subscriptionId, $isAmountAbsolute, $amount, $chargeDetails) {

		//parse inputs
		$resourcePath = "/tests/adjustsubscriptionbalance/{subscriptionId}/{isAmountAbsolute}/{amount}/{chargeDetails}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($isAmountAbsolute != null) {
			$resourcePath = str_replace("{isAmountAbsolute}", $this->apiClient->toPathValue($isAmountAbsolute), $resourcePath);
		}
		if($amount != null) {
			$resourcePath = str_replace("{amount}", $this->apiClient->toPathValue($amount), $resourcePath);
		}
		if($chargeDetails != null) {
			$resourcePath = str_replace("{chargeDetails}", $this->apiClient->toPathValue($chargeDetails), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'bool');
		return $responseObject;
				
				
	 }


	/**
	 * AssessSubscriptions
	 *
	 * 
	 * 
   * 
	 * @throws APIException 
	 */

	 public function AssessSubscriptions() {

		//parse inputs
		$resourcePath = "/tests/assesssubscriptions";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * AddChargeToSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param amount  amount
   *  @param chargeDetails  charge Details
   *  
	 * @return bool {@link bool} 
	 * @throws APIException 
	 */

	 public function AddChargeToSubscription($subscriptionId, $amount, $chargeDetails) {

		//parse inputs
		$resourcePath = "/tests/addcharge/{subscriptionId}/{amount}/{chargeDetails}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($amount != null) {
			$resourcePath = str_replace("{amount}", $this->apiClient->toPathValue($amount), $resourcePath);
		}
		if($chargeDetails != null) {
			$resourcePath = str_replace("{chargeDetails}", $this->apiClient->toPathValue($chargeDetails), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'bool');
		return $responseObject;
				
				
	 }


	/**
	 * AddSubscription
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param postData  new Subscription
   *  @param signUpDate  sign Up Date
   *  
	 * @return SubscriptionResponse {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function AddSubscription($siteSubdomain, $postData, $signUpDate) {

		//parse inputs
		$resourcePath = "/tests/addsubscription/{siteSubdomain}/{signUpDate}/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}
		if($signUpDate != null) {
			$resourcePath = str_replace("{signUpDate}", $this->apiClient->toPathValue($signUpDate), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SubscriptionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * AddEventToSubscription
	 *
	 * 
	 * 
   * @param postData  platform Event
   *  
	 * @return bool {@link bool} 
	 * @throws APIException 
	 */

	 public function AddEventToSubscription($postData) {

		//parse inputs
		$resourcePath = "/tests/addeventtosubscription/{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'bool');
		return $responseObject;
				
				
	 }


	/**
	 * SendDailyActivityReport
	 *
	 * 
	 * 
   * @param siteId  site Id
   *  
	 * @return bool {@link bool} 
	 * @throws APIException 
	 */

	 public function SendDailyActivityReport($siteId) {

		//parse inputs
		$resourcePath = "/tests/sendemailupdate/{siteId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'bool');
		return $responseObject;
				
				
	 }


	/**
	 * GetProductWithFullData
	 *
	 * 
	 * 
   * @param productId  product Id
   *  @param siteId  site Id
   *  
	 * @return ProductResponse {@link ProductResponse} 
	 * @throws APIException 
	 */

	 public function GetProductWithFullData($productId, $siteId) {

		//parse inputs
		$resourcePath = "/tests/fullproduct/{siteId}/{productId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($productId != null) {
			$resourcePath = str_replace("{productId}", $this->apiClient->toPathValue($productId), $resourcePath);
		}
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'ProductResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetSubscriptionItemsForAllSubscriptionProductItems
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @throws APIException 
	 */

	 public function GetSubscriptionItemsForAllSubscriptionProductItems($subscriptionId) {

		//parse inputs
		$resourcePath = "/tests/getsubscriptionitemsforallsubscriptionproductitems/{subscriptionId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * GetSubscriptionItemsForPricingPlan
	 *
	 * 
	 * 
   * @param productPricingPlanId  product PricingPlan Id
   *  @param siteId  site Id
   *  
	 * @throws APIException 
	 */

	 public function GetSubscriptionItemsForPricingPlan($productPricingPlanId, $siteId) {

		//parse inputs
		$resourcePath = "/tests/getsubscriptionitemsforpricingplan/{siteId}/{productPricingPlanId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($productPricingPlanId != null) {
			$resourcePath = str_replace("{productPricingPlanId}", $this->apiClient->toPathValue($productPricingPlanId), $resourcePath);
		}
		if($siteId != null) {
			$resourcePath = str_replace("{siteId}", $this->apiClient->toPathValue($siteId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }



}