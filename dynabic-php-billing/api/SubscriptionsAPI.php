<?php
/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

class SubscriptionsAPI {

	function __construct($apiClient) {
	  $this->apiClient = $apiClient;
	}


	/**
	 * GetSubscriptions
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param pageNumber  page number
   *  @param pageSize  page size
   *  
	 * @return Array<SubscriptionResponse> {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscriptions($siteSubdomain, $pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/subscriptions/bysite/{siteSubdomain}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SubscriptionResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetSubscriptionsForStatus
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param status  status
   *  @param pageNumber  page number
   *  @param pageSize  page size
   *  
	 * @return Array<SubscriptionResponse> {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscriptionsForStatus($siteSubdomain, $status, $pageNumber, $pageSize) {

		//parse inputs
		$resourcePath = "/subscriptions/{siteSubdomain}/status={status}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}
		if($status != null) {
			$resourcePath = str_replace("{status}", $this->apiClient->toPathValue($status), $resourcePath);
		}
		if($pageNumber != null) {
			$resourcePath = str_replace("{pageNumber}", $this->apiClient->toPathValue($pageNumber), $resourcePath);
		}
		if($pageSize != null) {
			$resourcePath = str_replace("{pageSize}", $this->apiClient->toPathValue($pageSize), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SubscriptionResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @return SubscriptionResponse {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscription($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/{subscriptionId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SubscriptionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetSubscriptionsOfCustomer
	 *
	 * 
	 * 
   * @param customerId  customer Id
   *  
	 * @return Array<SubscriptionResponse> {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscriptionsOfCustomer($customerId) {

		//parse inputs
		$resourcePath = "/subscriptions/{customerId}/subscriptions.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($customerId != null) {
			$resourcePath = str_replace("{customerId}", $this->apiClient->toPathValue($customerId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SubscriptionResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * GetSubscriptionsOfCustomerByReferenceId
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param customerReferenceId  customer Reference Id
   *  
	 * @return Array<SubscriptionResponse> {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscriptionsOfCustomerByReferenceId($siteSubdomain, $customerReferenceId) {

		//parse inputs
		$resourcePath = "/subscriptions/{siteSubdomain}/{customerReferenceId}/subscriptions.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}
		if($customerReferenceId != null) {
			$resourcePath = str_replace("{customerReferenceId}", $this->apiClient->toPathValue($customerReferenceId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SubscriptionResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * AddSubscription
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param postData  new Subscription
   *  
	 * @return SubscriptionResponse {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function AddSubscription($siteSubdomain, $postData) {

		//parse inputs
		$resourcePath = "/subscriptions/{siteSubdomain}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SubscriptionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * UpdateSubscription
	 *
	 * 
	 * 
   * @param siteSubdomain  site Subdomain
   *  @param subscriptionId  subscription Id
   *  @param postData  updated Subscription
   *  
	 * @return SubscriptionResponse {@link SubscriptionResponse} 
	 * @throws APIException 
	 */

	 public function UpdateSubscription($siteSubdomain, $subscriptionId, $postData) {

		//parse inputs
		$resourcePath = "/subscriptions/{siteSubdomain}/{subscriptionId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($siteSubdomain != null) {
			$resourcePath = str_replace("{siteSubdomain}", $this->apiClient->toPathValue($siteSubdomain), $resourcePath);
		}
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'SubscriptionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * DeleteSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @throws APIException 
	 */

	 public function DeleteSubscription($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/{subscriptionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * GetAddress
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @return AddressResponse {@link AddressResponse} 
	 * @throws APIException 
	 */

	 public function GetAddress($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/{subscriptionId}/billing-address.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'AddressResponse');
		return $responseObject;
				
				
	 }


	/**
	 * GetCustomersForProduct
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @return Array<CustomerResponse> {@link CustomerResponse} 
	 * @throws APIException 
	 */

	 public function GetCustomersForProduct($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/{subscriptionId}/customers.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'CustomerResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * AddChargeToSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param postData  charge
   *  
	 * @return TransactionResponse {@link TransactionResponse} 
	 * @throws APIException 
	 */

	 public function AddChargeToSubscription($subscriptionId, $postData) {

		//parse inputs
		$resourcePath = "/subscriptions/charge/{subscriptionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'TransactionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * Refund
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param postData  charge
   *  @param transactionId  transaction Id
   *  
	 * @return TransactionResponse {@link TransactionResponse} 
	 * @throws APIException 
	 */

	 public function Refund($subscriptionId, $postData, $transactionId) {

		//parse inputs
		$resourcePath = "/subscriptions/refund/{subscriptionId}/{transactionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($transactionId != null) {
			$resourcePath = str_replace("{transactionId}", $this->apiClient->toPathValue($transactionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
    if(! $response){
        return null;
    }

		//create output objects if the response has more than one object
		$responseObject = $this->apiClient->deserialize($response, 'TransactionResponse');
		return $responseObject;
				
				
	 }


	/**
	 * AdjustSubscriptionBalance
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param isAmountAbsolute  is Amount Absolute
   *  @param postData  charge
   *  
	 * @throws APIException 
	 */

	 public function AdjustSubscriptionBalance($subscriptionId, $isAmountAbsolute, $postData) {

		//parse inputs
		$resourcePath = "/subscriptions/adjustbalance/{subscriptionId}/{isAmountAbsolute}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($isAmountAbsolute != null) {
			$resourcePath = str_replace("{isAmountAbsolute}", $this->apiClient->toPathValue($isAmountAbsolute), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * ChangeSubscriptionProduct
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param newProductPricingPlanId  new Product Pricing Plan Id
   *  
	 * @throws APIException 
	 */

	 public function ChangeSubscriptionProduct($subscriptionId, $newProductPricingPlanId) {

		//parse inputs
		$resourcePath = "/subscriptions/changeproduct/{subscriptionId}/{newProductPricingPlanId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($newProductPricingPlanId != null) {
			$resourcePath = str_replace("{newProductPricingPlanId}", $this->apiClient->toPathValue($newProductPricingPlanId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * UpgradeDowngradeSubscriptionProduct
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param newProductPricingPlanId  new Product Pricing Plan Id
   *  @param includeTrial  include Trial
   *  @param includeUpfrontCharge  include Upfront Charge
   *  
	 * @throws APIException 
	 */

	 public function UpgradeDowngradeSubscriptionProduct($subscriptionId, $newProductPricingPlanId, $includeTrial, $includeUpfrontCharge) {

		//parse inputs
		$resourcePath = "/subscriptions/upgradedowngrade/{subscriptionId}/{newProductPricingPlanId}/{includeTrial}/{includeUpfrontCharge}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}
		if($newProductPricingPlanId != null) {
			$resourcePath = str_replace("{newProductPricingPlanId}", $this->apiClient->toPathValue($newProductPricingPlanId), $resourcePath);
		}
		if($includeTrial != null) {
			$resourcePath = str_replace("{includeTrial}", $this->apiClient->toPathValue($includeTrial), $resourcePath);
		}
		if($includeUpfrontCharge != null) {
			$resourcePath = str_replace("{includeUpfrontCharge}", $this->apiClient->toPathValue($includeUpfrontCharge), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * CancelSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  @param postData  request
   *  
	 * @throws APIException 
	 */

	 public function CancelSubscription($subscriptionId, $postData) {

		//parse inputs
		$resourcePath = "/subscriptions/cancel/{subscriptionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * ReactivateSubscription
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @throws APIException 
	 */

	 public function ReactivateSubscription($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/reactivate/{subscriptionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }


	/**
	 * AddSubscriptionItems
	 *
	 * 
	 * 
   * @param postData  request
   *  
	 * @throws APIException 
	 */

	 public function AddSubscriptionItems($postData) {

		//parse inputs
		$resourcePath = "/subscriptions/additems";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "POST";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * UpdateSubscriptionItems
	 *
	 * 
	 * 
   * @param postData  request
   *  
	 * @throws APIException 
	 */

	 public function UpdateSubscriptionItems($postData) {

		//parse inputs
		$resourcePath = "/subscriptions/updateitems";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "PUT";
        $queryParams = array();
        $headerParams = array();
    
		
	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, $postData, $headerParams);
		
	 }


	/**
	 * GetSubscriptionItems
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @return Array<SubscriptionItemResponse> {@link SubscriptionItemResponse} 
	 * @throws APIException 
	 */

	 public function GetSubscriptionItems($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/items/{subscriptionId}.{format}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "GET";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
    if(! $response){
        return null;
    }

		
        $responseObjects = array();
        foreach ($response as $object) {
          $responseObjects[] = $this->apiClient->deserialize($object, 'SubscriptionItemResponse');
        }
        return $responseObjects;				
	 }


	/**
	 * ResetSubscriptionMeteredItems
	 *
	 * 
	 * 
   * @param subscriptionId  subscription Id
   *  
	 * @throws APIException 
	 */

	 public function ResetSubscriptionMeteredItems($subscriptionId) {

		//parse inputs
		$resourcePath = "/subscriptions/resetmetered/{subscriptionId}";
		$resourcePath = str_replace("{format}", "json", $resourcePath);
		$resourcePath = str_replace("*", "", $resourcePath);
		$method = "DELETE";
        $queryParams = array();
        $headerParams = array();
    
		
		if($subscriptionId != null) {
			$resourcePath = str_replace("{subscriptionId}", $this->apiClient->toPathValue($subscriptionId), $resourcePath);
		}

	
	

		//make the API Call
		$response = $this->apiClient->callAPI($resourcePath, $method, $queryParams, null, $headerParams);
		
	 }



}